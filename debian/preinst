#!/bin/bash
# preinst script for astroberry64-server-sysmod
# Some tweaks come from AstroPi https://github.com/rlancaste/AstroPi3
# For all of these credits go to Rob Lancaster

if [ "$1" == "install" ]; then

	# setup astroberry user
	if [ -z "$(cut -d: -f1 /etc/passwd | grep '^astroberry$')" ]; then
	    useradd -m -G adm,dialout,cdrom,sudo,audio,video,plugdev,games,users,input,netdev,gpio,i2c,spi astroberry
	    echo -e "astroberry\nastroberry" | passwd astroberry
	fi

	if [ -n "$(cut -d: -f1 /etc/passwd | grep '^astroberry$')" ] && [ -z "$(pdbedit -L | grep astroberry)" ]; then
	    echo -e "astroberry\nastroberry" | smbpasswd -s -a astroberry
	fi

	# set log directory and access rights
	if [ ! -d /var/log/astroberry ] && [ -n "$(cut -d: -f1 /etc/passwd | grep '^astroberry$')" ]; then
	    mkdir /var/log/astroberry
	    chmod 750 /var/log/astroberry
	    chown astroberry:adm /var/log/astroberry
	fi

	# set GUI autologin for astroberry user
	if [ -e /etc/lightdm/lightdm.conf ] && [ -n "$(cut -d: -f1 /etc/passwd | grep '^astroberry$')" ] && [ -n "$(grep '^autologin-user=' /etc/lightdm/lightdm.conf)" ]; then
	    sed -i "s/^autologin-user=.*/autologin-user=astroberry/g" /etc/lightdm/lightdm.conf
	fi

	# set console autologin for astroberry user
	if [ -n "$(cut -d: -f1 /etc/passwd | grep '^astroberry$')" ] && [ -e /etc/systemd/system/getty@tty1.service.d/autologin.conf ]; then
	    sed -i "s/--autologin pi --noclear/--autologin astroberry --noclear/g" /etc/systemd/system/getty@tty1.service.d/autologin.conf
	fi

	# Configure boot config and cmdline (Trixie uses /boot/firmware/)
	BOOT_CONFIG="/boot/firmware/config.txt"
	BOOT_CMDLINE="/boot/firmware/cmdline.txt"

	# Add Astroberry configuration block if not already present
	if [ ! -f "$BOOT_CONFIG" ]; then
		echo "ERROR: $BOOT_CONFIG not found!"
	elif [ -z "$(grep '# Astroberry64 Configuration' $BOOT_CONFIG)" ]; then
		# Ensure [all] section exists
		if [ -z "$(grep '^\[all\]' $BOOT_CONFIG)" ]; then
			echo "" >> $BOOT_CONFIG
			echo "[all]" >> $BOOT_CONFIG
		fi

		# Add Astroberry configuration block under [all] section
		cat >> $BOOT_CONFIG << 'EOF'

# Astroberry64 Configuration
# See: https://www.raspberrypi.org/documentation/configuration/config-txt/

# Display configuration - 1920x1080 minimum for astronomy applications
# Required for proper INDI/KStars/Ekos window layouts
hdmi_force_hotplug=1   # Force HDMI output even without monitor connected
hdmi_group=2           # DMT (Display Monitor Timings) for computer monitors
hdmi_mode=82           # 1920x1080 @ 60Hz

# Hardware interfaces for astronomy equipment
dtparam=i2c_arm=on     # I2C for sensors and focusers
dtparam=spi=on         # SPI for cameras and sensors
enable_uart=1          # UART for GPS modules and mount controllers

# System configuration
gpu_mem=128            # GPU memory allocation in MiB for desktop performance
EOF
	fi

	# Disable serial console on tty1 (frees up serial for astronomy equipment)
	if [ -f "$BOOT_CMDLINE" ] && [ -n "$(grep 'console=serial0,115200 console=tty1' $BOOT_CMDLINE)" ]; then
		sed -i "s/console=serial0,115200 console=tty1/console=tty1/g" $BOOT_CMDLINE
	fi

	# Add virtual display parameter for headless VNC/RustDesk support
	# This creates a virtual HDMI display at 1920x1080@60Hz even without physical monitor
	# Higher resolutions (2560x1440, 3840x2160) are added dynamically via xrandr
	if [ -f "$BOOT_CMDLINE" ] && [ -z "$(grep 'video=HDMI-A-1:' $BOOT_CMDLINE)" ]; then
		sed -i 's/$/ video=HDMI-A-1:1920x1080@60D/' $BOOT_CMDLINE
	fi

	# Fix for RPi 4/5 video resolution (comment out old fake KMS driver)
	if [ -n "$(grep '^dtoverlay=vc4-fkms-v3d' $BOOT_CONFIG 2>/dev/null)" ]; then
		sed -i "s/^dtoverlay=vc4-fkms-v3d/#dtoverlay=vc4-fkms-v3d  # Disabled by Astroberry64 - conflicts with headless VNC/g" $BOOT_CONFIG
	fi

	# set hostname
	if [ -n "$(grep '^raspberrypi$' /etc/hostname)" ]; then
	    echo "astroberry" > /etc/hostname
	fi

	if [ -n "$(grep '127.0.1.1' /etc/hosts| tr -d '127.0.1.1'| tr -d [:blank:] | grep '^raspberrypi$')" ]; then
	    sed -i "s/raspberrypi/astroberry/g" /etc/hosts
	fi

	# remove pi password change prompt
	if [ -e /run/sshwarn ]; then
	    rm -rf /run/sshwarn
	fi

	# handle custom config files
	if [ ! -e /etc/xdg/libfm/libfm.conf.disabled ]; then
	    mv -f /etc/xdg/libfm/libfm.conf /etc/xdg/libfm/libfm.conf.disabled
	    ln -s /etc/xdg/libfm/libfm.conf.astroberry /etc/xdg/libfm/libfm.conf
	fi
	if [ ! -e /etc/samba/smb.conf.disabled ]; then
	    mv -f /etc/samba/smb.conf /etc/samba/smb.conf.disabled
	    ln -s /etc/samba/smb.conf.astroberry /etc/samba/smb.conf
	fi

fi

if [ "$1" == "upgrade" ]; then

	# unlock pi user account
	if [ -n "$(cut -d: -f1 /etc/passwd | grep '^pi$')" ] && [ -n "$(passwd -S pi | grep '^pi L')" ]; then
	    passwd -u pi
	    usermod -s /bin/bash pi
	fi

fi
